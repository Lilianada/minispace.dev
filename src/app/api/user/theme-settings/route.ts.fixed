import { NextRequest, NextResponse } from 'next/server';
import { db } from '@/lib/firebase/config';
import { doc, setDoc, getDoc } from 'firebase/firestore';
import { auth } from '@/lib/auth';
import { authOptions } from '@/lib/auth-options';
import { getServerSession } from 'next-auth';
import { getUserId } from '@/lib/user-utils';

export async function POST(request: NextRequest) {
  try {
    // Try both authentication methods
    const session = await getServerSession(authOptions);
    const currentUser = session?.user || auth.currentUser;
    
    // Check if authenticated
    if (!currentUser) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    // Get the request body
    const body = await request.json();
    const { themeId, customizations } = body;
    
    if (!themeId) {
      return NextResponse.json(
        { error: 'Theme ID is required' },
        { status: 400 }
      );
    }
    
    // Get user ID from auth
    const userId = getUserId(currentUser);
    
    if (!userId) {
      return NextResponse.json(
        { error: 'Unable to determine user ID' },
        { status: 400 }
      );
    }
    
    // Get user document reference
    const userRef = doc(db, 'users', userId);
    
    // Check if user exists
    const userDoc = await getDoc(userRef);
    if (!userDoc.exists()) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      );
    }
    
    // Update the user's theme settings
    await setDoc(userRef, {
      themeSettings: {
        themeId,
        customizations
      }
    }, { merge: true });
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error saving theme settings:', error);
    
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Internal server error' },
      { status: 500 }
    );
  }
}
